func TreeVisitormain()
t0 = 4
t1 = alloc( t0 )
t2 = 4
t3 = alloc( t2 )
t4 = @TVStart
[t3 + 0] = t4
[t1 + 0] = t3
if0 t1 goto v1Error
goto v1End
v1Error:
error("null pointer")
v1End:
t5 = [t1 + 0]
t5 = [t5 + 0]
v5 = s1
a2 = t1
s1 = call t5()
print( s1)
s2 = 0
trivial = s2
return trivial
func TVStart()
t0 = 28
t1 = alloc( t0 )
t2 = 84
t3 = alloc( t2 )
t4 = @TreeDelete
[t3 + 52] = t4
t5 = @TreeSetHas_Left
[t3 + 36] = t5
s1 = @TreeRemoveLeft
[t3 + 64] = s1
s2 = @TreeGetKey
[t3 + 20] = s2
s3 = @TreeSetRight
[t3 + 4] = s3
s4 = @TreeGetLeft
[t3 + 16] = s4
s5 = @TreeGetRight
[t3 + 12] = s5
s6 = @TreeRemove
[t3 + 56] = s6
s7 = @TreeSetLeft
[t3 + 8] = s7
s8 = @TreeInsert
[t3 + 48] = s8
t0 = @Treeaccept
[t3 + 80] = t0
t2 = @TreePrint
[t3 + 72] = t2
t4 = @TreeInit
[t3 + 0] = t4
t5 = @TreeGetHas_Right
[t3 + 28] = t5
s1 = @TreeGetHas_Left
[t3 + 32] = s1
s2 = @TreeRemoveRight
[t3 + 60] = s2
s3 = @TreeSearch
[t3 + 68] = s3
s4 = @TreeSetKey
[t3 + 24] = s4
s5 = @TreeCompare
[t3 + 44] = s5
s6 = @TreeSetHas_Right
[t3 + 40] = s6
s7 = @TreeRecPrint
[t3 + 76] = s7
[t1 + 0] = t3
if0 t1 goto v7Error
goto v7End
v7Error:
error("null pointer")
v7End:
s8 = t1
t0 = [s8 + 0]
t0 = [t0 + 0]
t2 = 16
v31 = t4
root = s8
a2 = s8
a3 = t2
t4 = call t0()
s8 = root
t5 = t4
s1 = [s8 + 0]
s1 = [s1 + 72]
v34 = s2
root = s8
ntb = t5
a2 = s8
s2 = call s1()
t5 = ntb
s8 = root
t5 = s2
s3 = 100000000
print( s3)
s4 = [s8 + 0]
s4 = [s4 + 48]
s5 = 8
root = s8
v37 = s6
ntb = t5
a2 = s8
a3 = s5
s6 = call s4()
t5 = ntb
s8 = root
t5 = s6
s7 = [s8 + 0]
s7 = [s7 + 48]
t3 = 24
root = s8
ntb = t5
v40 = t1
a2 = s8
a3 = t3
t1 = call s7()
t5 = ntb
s8 = root
t5 = t1
t0 = [s8 + 0]
t0 = [t0 + 48]
t2 = 4
root = s8
ntb = t5
v43 = t4
a2 = s8
a3 = t2
t4 = call t0()
t5 = ntb
s8 = root
t5 = t4
s1 = [s8 + 0]
s1 = [s1 + 48]
s2 = 12
root = s8
ntb = t5
v46 = s3
a2 = s8
a3 = s2
s3 = call s1()
t5 = ntb
s8 = root
t5 = s3
s4 = [s8 + 0]
s4 = [s4 + 48]
s5 = 20
root = s8
ntb = t5
v49 = s6
a2 = s8
a3 = s5
s6 = call s4()
t5 = ntb
s8 = root
t5 = s6
s7 = [s8 + 0]
s7 = [s7 + 48]
t3 = 28
v52 = t1
root = s8
ntb = t5
a2 = s8
a3 = t3
t1 = call s7()
t5 = ntb
s8 = root
t5 = t1
t0 = [s8 + 0]
t0 = [t0 + 48]
t2 = 14
v55 = t4
root = s8
ntb = t5
a2 = s8
a3 = t2
t4 = call t0()
t5 = ntb
s8 = root
t5 = t4
s1 = [s8 + 0]
s1 = [s1 + 72]
v58 = s2
root = s8
ntb = t5
a2 = s8
s2 = call s1()
t5 = ntb
s8 = root
t5 = s2
s3 = 100000000
print( s3)
s5 = 12
s4 = alloc( s5 )
s6 = 4
s7 = alloc( s6 )
t3 = @MyVisitorvisit
[s7 + 0] = t3
[s4 + 0] = s7
if0 s4 goto v61Error
goto v61End
v61Error:
error("null pointer")
v61End:
t1 = s4
t0 = 50000000
print( t0)
t2 = [s8 + 0]
t2 = [t2 + 80]
v66 = t4
root = s8
ntb = t5
a2 = s8
a3 = t1
t4 = call t2()
t5 = ntb
s8 = root
s1 = t4
s2 = 100000000
print( s2)
s3 = [s8 + 0]
s3 = [s3 + 68]
s5 = 24
v69 = s6
root = s8
ntb = t5
a2 = s8
a3 = s5
s6 = call s3()
t5 = ntb
s8 = root
print( s6)
t3 = [s8 + 0]
t3 = [t3 + 68]
s7 = 12
v72 = s4
root = s8
ntb = t5
a2 = s8
a3 = s7
s4 = call t3()
t5 = ntb
s8 = root
print( s4)
t0 = [s8 + 0]
t0 = [t0 + 68]
t2 = 16
v75 = t1
root = s8
ntb = t5
a2 = s8
a3 = t2
t1 = call t0()
t5 = ntb
s8 = root
print( t1)
t4 = [s8 + 0]
t4 = [t4 + 68]
s2 = 50
v78 = s3
root = s8
ntb = t5
a2 = s8
a3 = s2
s3 = call t4()
t5 = ntb
s8 = root
print( s3)
s5 = [s8 + 0]
s5 = [s5 + 68]
s6 = 12
root = s8
ntb = t5
v81 = t3
a2 = s8
a3 = s6
t3 = call s5()
t5 = ntb
s8 = root
print( t3)
s7 = [s8 + 0]
s7 = [s7 + 52]
s4 = 12
root = s8
ntb = t5
v84 = t0
a2 = s8
a3 = s4
t0 = call s7()
t5 = ntb
s8 = root
t5 = t0
t2 = [s8 + 0]
t2 = [t2 + 72]
root = s8
ntb = t5
v87 = t1
a2 = s8
t1 = call t2()
t5 = ntb
s8 = root
t5 = t1
t4 = [s8 + 0]
t4 = [t4 + 68]
s2 = 12
v89 = s3
a2 = s8
a3 = s2
s3 = call t4()
print( s3)
s5 = 0
v91 = s5
return v91
func TreeInit()
[a2 + 12] = a3
t0 = 0
[a2 + 16] = t0
t1 = 0
[a2 + 20] = t1
t2 = 1
v97 = t2
return v97
func TreeSetRight()
[a2 + 8] = a3
t0 = 1
v99 = t0
return v99
func TreeSetLeft()
[a2 + 4] = a3
t0 = 1
v101 = t0
return v101
func TreeGetRight()
t0 = [a2 + 8]
v102 = t0
return v102
func TreeGetLeft()
t0 = [a2 + 4]
v103 = t0
return v103
func TreeGetKey()
t0 = [a2 + 12]
v104 = t0
return v104
func TreeSetKey()
[a2 + 12] = a3
t0 = 1
v106 = t0
return v106
func TreeGetHas_Right()
t0 = [a2 + 20]
v107 = t0
return v107
func TreeGetHas_Left()
t0 = [a2 + 16]
v108 = t0
return v108
func TreeSetHas_Left()
[a2 + 16] = a3
t0 = 1
v110 = t0
return v110
func TreeSetHas_Right()
[a2 + 20] = a3
t0 = 1
v112 = t0
return v112
func TreeCompare()
t0 = 0
t1 = t0
t2 = 1
t3 = a4 + t2
t4 = t3
t5 = a3 < a4
if0 t5 goto v116_else
s1 = 0
t1 = s1
goto v116_end
v116_else:
s2 = a3 < t4
s3 = 1
s4 = s3 - s2
if0 s4 goto v120_else
s5 = 0
t1 = s5
goto v120_end
v120_else:
s6 = 1
t1 = s6
v120_end:
v116_end:
ntb = t1
return ntb
func TreeInsert()
t0 = 28
t1 = alloc( t0 )
t2 = 84
t3 = alloc( t2 )
t4 = @TreeDelete
[t3 + 52] = t4
t5 = @TreeSetHas_Left
[t3 + 36] = t5
s1 = @TreeRemoveLeft
[t3 + 64] = s1
s2 = @TreeGetKey
[t3 + 20] = s2
s3 = @TreeSetRight
[t3 + 4] = s3
s4 = @TreeGetLeft
[t3 + 16] = s4
s5 = @TreeGetRight
[t3 + 12] = s5
s6 = @TreeRemove
[t3 + 56] = s6
s7 = @TreeSetLeft
[t3 + 8] = s7
s8 = @TreeInsert
[t3 + 48] = s8
t0 = @Treeaccept
[t3 + 80] = t0
t2 = @TreePrint
[t3 + 72] = t2
t4 = @TreeInit
[t3 + 0] = t4
t5 = @TreeGetHas_Right
[t3 + 28] = t5
s1 = @TreeGetHas_Left
[t3 + 32] = s1
s2 = @TreeRemoveRight
[t3 + 60] = s2
s3 = @TreeSearch
[t3 + 68] = s3
s4 = @TreeSetKey
[t3 + 24] = s4
s5 = @TreeCompare
[t3 + 44] = s5
s6 = @TreeSetHas_Right
[t3 + 40] = s6
s7 = @TreeRecPrint
[t3 + 76] = s7
[t1 + 0] = t3
if0 t1 goto v124Error
goto v124End
v124Error:
error("null pointer")
v124End:
s8 = t1
t0 = [s8 + 0]
t0 = [t0 + 0]
a2_stacksave = a2
a3_stacksave = a3
v148 = t2
new_node = s8
a2 = s8
a3 = a3_stacksave
t2 = call t0()
a2 = a2_stacksave
a3 = a3_stacksave
s8 = new_node
t4 = t2
t5 = a2
s1 = 1
s2 = s1
loopv150:
if0 s2 goto v150_end
 s10 = [t5 + 0]
v151 = s10
s9 = v151
 s10 = [s9 + 20]
v151 = s10
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
s9 = v151
s10 = call s9()
v152 = s10
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
s3 = v152
 s11 = a3 < s3
v153 = s11
s9 = v153
if0 s9 goto v153_else
 s10 = [t5 + 0]
v154 = s10
s9 = v154
 s10 = [s9 + 32]
v154 = s10
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
s9 = v154
s10 = call s9()
v155 = s10
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
s9 = v155
if0 s9 goto v155_else
 s10 = [t5 + 0]
v156 = s10
s9 = v156
 s10 = [s9 + 16]
v156 = s10
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
s9 = v156
s10 = call s9()
v157 = s10
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
t5 = v157
goto v155_end
v155_else:
 s9 = 0
v158 = s9
s2 = v158
 s10 = [t5 + 0]
v159 = s10
s9 = v159
 s10 = [s9 + 36]
v159 = s10
t3 = 1
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
a3 = t3
s9 = v159
t0 = call s9()
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
t4 = t0
t1 = [t5 + 0]
t1 = [t1 + 8]
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
a3 = s8
s10 = call t1()
v163 = s10
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
t4 = v163
v155_end:
goto v153_end
v153_else:
 s10 = [t5 + 0]
v164 = s10
s9 = v164
 s10 = [s9 + 28]
v164 = s10
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
s9 = v164
s10 = call s9()
v165 = s10
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
s9 = v165
if0 s9 goto v165_else
 s10 = [t5 + 0]
v166 = s10
s9 = v166
 s10 = [s9 + 12]
v166 = s10
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
s9 = v166
s1 = call s9()
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
t3 = v161
s2 = cont
t5 = s1
goto v165_end
v165_else:
 s9 = 0
v168 = s9
s2 = v168
t2 = [t5 + 0]
t2 = [t2 + 40]
s7 = 1
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
a3 = s7
s6 = call t2()
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s5 = v173
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
t4 = s6
s4 = [t5 + 0]
s4 = [s4 + 4]
a3_stacksave = a3
v161 = t3
v162 = t1
current_node = t5
v160 = t0
v169 = t2
v167 = s1
key_aux = s3
new_node = s8
cont = s2
ntb = t4
v172 = s4
v173 = s5
v170 = s6
v171 = s7
a2 = t5
a3 = s8
s5 = call s4()
a3 = a3_stacksave
s3 = key_aux
t4 = ntb
t5 = current_node
s4 = v172
s6 = v170
s7 = v171
s8 = new_node
t0 = v160
t1 = v162
t2 = v169
s1 = v167
t3 = v161
s2 = cont
t4 = s5
v165_end:
v153_end:
goto loopv150
v150_end:
t5 = 1
v174 = t5
return v174
func TreeDelete()
t0 = a2
t1 = a2
t2 = 1
t3 = t2
t4 = 0
t5 = t4
s1 = 1
s2 = s1
loopv178:
if0 t3 goto v178_end
 s10 = [t0 + 0]
v179 = s10
s9 = v179
 s10 = [s9 + 20]
v179 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v179
s7 = call s9()
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
s9 = s7
key_aux = s9
s10 = key_aux
s5 = a3 < s10
if0 s5 goto v181_else
s6 = [t0 + 0]
s6 = [s6 + 32]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s3 = call s6()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
if0 s3 goto v183_else
t1 = t0
s4 = [t0 + 0]
s4 = [s4 + 16]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s10 = call s4()
v185 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
t0 = v185
goto v183_end
v183_else:
 s9 = 0
v186 = s9
t3 = v186
v183_end:
goto v181_end
v181_else:
s9 = key_aux
 s11 = s9 < a3
v187 = s11
s9 = v187
if0 s9 goto v187_else
 s10 = [t0 + 0]
v188 = s10
s9 = v188
 s10 = [s9 + 28]
v188 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v188
t4 = call s9()
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
if0 t4 goto v189_else
t1 = t0
 s10 = [t0 + 0]
v190 = s10
s9 = v190
 s10 = [s9 + 12]
v190 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v190
s10 = call s9()
v191 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
t0 = v191
goto v189_end
v189_else:
 s9 = 0
v192 = s9
t3 = v192
v189_end:
goto v187_end
v187_else:
if0 s2 goto is_root_else
 s10 = [t0 + 0]
v193 = s10
s9 = v193
 s10 = [s9 + 28]
v193 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v193
s10 = call s9()
v194 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
 s9 = 1
v195 = s9
s9 = v195
s10 = v194
 s11 = s9 - s10
v196 = s11
 s10 = [t0 + 0]
v197 = s10
s9 = v197
 s10 = [s9 + 32]
v197 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v197
s10 = call s9()
v198 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
 s9 = 1
v199 = s9
s9 = v199
s10 = v198
s1 = s9 - s10
s9 = v196
 s11 = s9 * s1
v201 = s11
s9 = v201
if0 s9 goto v201_else
s8 = 1
s9 = s8
ntb = s9
goto v201_end
v201_else:
t2 = [a2 + 0]
t2 = [t2 + 56]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = a2_stacksave
a3 = t1
a4 = t0
s10 = call t2()
v204 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
s9 = v204
ntb = s9
v201_end:
goto is_root_end
is_root_else:
 s10 = [a2 + 0]
v205 = s10
s9 = v205
 s10 = [s9 + 56]
v205 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v202 = s8
v203 = t2
v189 = t4
v200 = s1
is_root = s2
found = t5
parent_node = t1
cont = t3
a2 = a2_stacksave
a3 = t1
a4 = t0
s9 = v205
s10 = call s9()
v206 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v189
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v202
t0 = current_node
t1 = parent_node
t2 = v203
s1 = v200
s2 = is_root
t3 = cont
s9 = v206
ntb = s9
is_root_end:
 s9 = 1
v207 = s9
t5 = v207
 s9 = 0
v208 = s9
t3 = v208
v187_end:
v181_end:
 s9 = 0
v209 = s9
s2 = v209
goto loopv178
v178_end:
found = t5
return found
func TreeRemove()
t0 = [a4 + 0]
t0 = [t0 + 32]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v211 = t1
a2 = a4_stacksave
t1 = call t0()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
if0 t1 goto v211_else
t2 = [a2 + 0]
t2 = [t2 + 64]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v213 = t3
a2 = a2_stacksave
a3 = a3_stacksave
a4 = a4_stacksave
t3 = call t2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = t3
goto v211_end
v211_else:
t5 = [a4 + 0]
t5 = [t5 + 28]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v215 = s1
ntb = t4
a2 = a4_stacksave
s1 = call t5()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
if0 s1 goto v215_else
s2 = [a2 + 0]
s2 = [s2 + 60]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v217 = s3
ntb = t4
a2 = a2_stacksave
a3 = a3_stacksave
a4 = a4_stacksave
s3 = call s2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s3
goto v215_end
v215_else:
s4 = [a4 + 0]
s4 = [s4 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v219 = s5
ntb = t4
a2 = a4_stacksave
s5 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = s5
s7 = [a3 + 0]
s7 = [s7 + 16]
a2_stacksave = a2
a3_stacksave = a3
auxkey1 = s6
v221 = s8
ntb = t4
a2 = a3_stacksave
s8 = call s7()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = auxkey1
t0 = [s8 + 0]
t0 = [t0 + 20]
a2_stacksave = a2
a3_stacksave = a3
auxkey1 = s6
v223 = t1
ntb = t4
a2 = s8
t1 = call t0()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = auxkey1
t2 = t1
t3 = [a2 + 0]
t3 = [t3 + 44]
a2_stacksave = a2
a3_stacksave = a3
v225 = t5
ntb = t4
a2 = a2_stacksave
a3 = s6
a4 = t2
t5 = call t3()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
if0 t5 goto v225_else
s1 = [a3 + 0]
s1 = [s1 + 8]
s2 = [a2 + 24]
a2_stacksave = a2
a3_stacksave = a3
ntb = t4
v227 = s3
a2 = a3_stacksave
a3 = s2
s3 = call s1()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s3
s4 = [a3 + 0]
s4 = [s4 + 36]
s5 = 0
a2_stacksave = a2
a3_stacksave = a3
ntb = t4
v230 = s7
a2 = a3_stacksave
a3 = s5
s7 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s7
goto v225_end
v225_else:
t0 = [a3 + 0]
t0 = [t0 + 4]
s8 = [a2 + 24]
a3_stacksave = a3
ntb = t4
v233 = t1
a2 = a3_stacksave
a3 = s8
t1 = call t0()
a3 = a3_stacksave
t4 = ntb
t4 = t1
s6 = [a3 + 0]
s6 = [s6 + 40]
t2 = 0
a3_stacksave = a3
ntb = t4
v236 = t3
a2 = a3_stacksave
a3 = t2
t3 = call s6()
t4 = ntb
t4 = t3
v225_end:
v215_end:
v211_end:
t5 = 1
v238 = t5
return v238
func TreeRemoveRight()
loopv239:
s1 = [a4 + 0]
s1 = [s1 + 28]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v246 = t0
v247 = t1
v244 = t2
v245 = t3
v242 = t4
v243 = t5
v240 = s1
v241 = s2
v248 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
s2 = call s1()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v242
s3 = v248
t5 = v243
s4 = v249
s5 = ntb
t0 = v246
t1 = v247
t2 = v244
s1 = v240
t3 = v245
if0 s2 goto v239_end
t4 = [a4 + 0]
t4 = [t4 + 24]
t2 = [a4 + 0]
t2 = [t2 + 12]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v246 = t0
v247 = t1
v244 = t2
v245 = t3
v242 = t4
v243 = t5
v240 = s1
v241 = s2
v248 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
t3 = call t2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v242
s3 = v248
t5 = v243
s4 = v249
s5 = ntb
t0 = v246
t1 = v247
t2 = v244
s1 = v240
s2 = v241
t0 = [t3 + 0]
t0 = [t0 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v246 = t0
v247 = t1
v244 = t2
v245 = t3
v242 = t4
v243 = t5
v240 = s1
v241 = s2
v248 = s3
v249 = s4
ntb = s5
a2 = t3
t1 = call t0()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v242
s3 = v248
t5 = v243
s4 = v249
s5 = ntb
t0 = v246
t2 = v244
s1 = v240
t3 = v245
s2 = v241
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v246 = t0
v247 = t1
v244 = t2
v245 = t3
v242 = t4
v243 = t5
v240 = s1
v241 = s2
v248 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
a3 = t1
t5 = call t4()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v242
s3 = v248
s4 = v249
s5 = ntb
t0 = v246
t1 = v247
t2 = v244
s1 = v240
t3 = v245
s2 = v241
s5 = t5
a3 = a4
s3 = [a4 + 0]
s3 = [s3 + 12]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v246 = t0
v247 = t1
v244 = t2
v245 = t3
v242 = t4
v243 = t5
v240 = s1
v241 = s2
v248 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
s4 = call s3()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v242
s3 = v248
t5 = v243
s5 = ntb
t0 = v246
t1 = v247
t2 = v244
s1 = v240
t3 = v245
s2 = v241
a4 = s4
goto loopv239
v239_end:
s6 = [a3 + 0]
s6 = [s6 + 4]
s7 = [a2 + 24]
a3_stacksave = a3
v251 = s8
ntb = s5
a2 = a3_stacksave
a3 = s7
s8 = call s6()
a3 = a3_stacksave
s5 = ntb
s5 = s8
t0 = [a3 + 0]
t0 = [t0 + 40]
t1 = 0
a3_stacksave = a3
v254 = t2
ntb = s5
a2 = a3_stacksave
a3 = t1
t2 = call t0()
s5 = ntb
s5 = t2
t3 = 1
v256 = t3
return v256
func TreeRemoveLeft()
loopv257:
t2 = [a4 + 0]
t2 = [t2 + 32]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v260 = t0
v261 = t1
v258 = t2
v266 = t3
v267 = t4
v264 = t5
v265 = s1
v262 = s2
v263 = s3
v259 = s4
ntb = s5
a2 = a4_stacksave
s4 = call t2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v267
s3 = v263
t5 = v264
s5 = ntb
t0 = v260
t1 = v261
t2 = v258
s1 = v265
t3 = v266
s2 = v262
if0 s4 goto v257_end
t0 = [a4 + 0]
t0 = [t0 + 24]
s2 = [a4 + 0]
s2 = [s2 + 16]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v260 = t0
v261 = t1
v258 = t2
v266 = t3
v267 = t4
v264 = t5
v265 = s1
v262 = s2
v263 = s3
v259 = s4
ntb = s5
a2 = a4_stacksave
s3 = call s2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v267
t5 = v264
s4 = v259
s5 = ntb
t0 = v260
t1 = v261
t2 = v258
s1 = v265
t3 = v266
s2 = v262
t5 = [s3 + 0]
t5 = [t5 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v260 = t0
v261 = t1
v258 = t2
v266 = t3
v267 = t4
v264 = t5
v265 = s1
v262 = s2
v263 = s3
v259 = s4
ntb = s5
a2 = s3
s1 = call t5()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v267
s3 = v263
t5 = v264
s4 = v259
s5 = ntb
t0 = v260
t1 = v261
t2 = v258
t3 = v266
s2 = v262
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v260 = t0
v261 = t1
v258 = t2
v266 = t3
v267 = t4
v264 = t5
v265 = s1
v262 = s2
v263 = s3
v259 = s4
ntb = s5
a2 = a4_stacksave
a3 = s1
t1 = call t0()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v267
s3 = v263
t5 = v264
s4 = v259
s5 = ntb
t0 = v260
t2 = v258
s1 = v265
t3 = v266
s2 = v262
s5 = t1
a3 = a4
t3 = [a4 + 0]
t3 = [t3 + 16]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v260 = t0
v261 = t1
v258 = t2
v266 = t3
v267 = t4
v264 = t5
v265 = s1
v262 = s2
v263 = s3
v259 = s4
ntb = s5
a2 = a4_stacksave
t4 = call t3()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v263
t5 = v264
s4 = v259
s5 = ntb
t0 = v260
t1 = v261
t2 = v258
s1 = v265
t3 = v266
s2 = v262
a4 = t4
goto loopv257
v257_end:
s6 = [a3 + 0]
s6 = [s6 + 8]
s7 = [a2 + 24]
a3_stacksave = a3
v269 = s8
ntb = s5
a2 = a3_stacksave
a3 = s7
s8 = call s6()
a3 = a3_stacksave
s5 = ntb
s5 = s8
t0 = [a3 + 0]
t0 = [t0 + 36]
t1 = 0
a3_stacksave = a3
v272 = t2
ntb = s5
a2 = a3_stacksave
a3 = t1
t2 = call t0()
s5 = ntb
s5 = t2
t3 = 1
v274 = t3
return v274
func TreeSearch()
t0 = a2
t1 = 1
t2 = t1
t3 = 0
t4 = t3
loopv277:
if0 t2 goto v277_end
t3 = [t0 + 0]
t3 = [t3 + 20]
a3_stacksave = a3
v282 = t5
v293 = s1
v283 = s2
v280 = s3
v291 = s4
current_node = t0
v281 = s5
v292 = s6
v290 = s7
ifound = t4
v279 = s8
v288 = t1
v278 = t3
cont = t2
a2 = t0
s8 = call t3()
a3 = a3_stacksave
s3 = v280
t4 = ifound
t5 = v282
s4 = v291
s5 = v281
s6 = v292
s7 = v290
t0 = current_node
t1 = v288
s1 = v293
t2 = cont
s2 = v283
t3 = v278
s9 = s8
key_aux = s9
s10 = key_aux
s3 = a3 < s10
if0 s3 goto v280_else
s5 = [t0 + 0]
s5 = [s5 + 32]
a3_stacksave = a3
v282 = t5
v293 = s1
v283 = s2
v280 = s3
v291 = s4
current_node = t0
v281 = s5
v292 = s6
v290 = s7
ifound = t4
v279 = s8
v288 = t1
v278 = t3
cont = t2
a2 = t0
t5 = call s5()
a3 = a3_stacksave
s3 = v280
t4 = ifound
s4 = v291
s5 = v281
s6 = v292
s7 = v290
s8 = v279
t0 = current_node
t1 = v288
s1 = v293
t2 = cont
s2 = v283
t3 = v278
if0 t5 goto v282_else
s2 = [t0 + 0]
s2 = [s2 + 16]
a3_stacksave = a3
v282 = t5
v293 = s1
v283 = s2
v280 = s3
v291 = s4
current_node = t0
v281 = s5
v292 = s6
v290 = s7
ifound = t4
v279 = s8
v288 = t1
v278 = t3
cont = t2
a2 = t0
s10 = call s2()
v284 = s10
a3 = a3_stacksave
s3 = v280
t4 = ifound
t5 = v282
s4 = v291
s5 = v281
s6 = v292
s7 = v290
s8 = v279
t0 = current_node
t1 = v288
s1 = v293
t2 = cont
s2 = v283
t3 = v278
t0 = v284
goto v282_end
v282_else:
 s9 = 0
v285 = s9
t2 = v285
v282_end:
goto v280_end
v280_else:
s9 = key_aux
 s11 = s9 < a3
v286 = s11
s9 = v286
if0 s9 goto v286_else
 s10 = [t0 + 0]
v287 = s10
s9 = v287
 s10 = [s9 + 28]
v287 = s10
a3_stacksave = a3
v282 = t5
v293 = s1
v283 = s2
v280 = s3
v291 = s4
current_node = t0
v281 = s5
v292 = s6
v290 = s7
ifound = t4
v279 = s8
v288 = t1
v278 = t3
cont = t2
a2 = t0
s9 = v287
t1 = call s9()
a3 = a3_stacksave
s3 = v280
t4 = ifound
t5 = v282
s4 = v291
s5 = v281
s6 = v292
s7 = v290
s8 = v279
t0 = current_node
s1 = v293
t2 = cont
s2 = v283
t3 = v278
if0 t1 goto v288_else
 s10 = [t0 + 0]
v289 = s10
s9 = v289
 s10 = [s9 + 12]
v289 = s10
a3_stacksave = a3
v282 = t5
v293 = s1
v283 = s2
v280 = s3
v291 = s4
current_node = t0
v281 = s5
v292 = s6
v290 = s7
ifound = t4
v279 = s8
v288 = t1
v278 = t3
cont = t2
a2 = t0
s9 = v289
s7 = call s9()
a3 = a3_stacksave
s3 = v280
t4 = ifound
t5 = v282
s4 = v291
s5 = v281
s6 = v292
s8 = v279
t0 = current_node
t1 = v288
s1 = v293
t2 = cont
s2 = v283
t3 = v278
t0 = s7
goto v288_end
v288_else:
s4 = 0
t2 = s4
v288_end:
goto v286_end
v286_else:
s6 = 1
t4 = s6
s1 = 0
t2 = s1
v286_end:
v280_end:
goto loopv277
v277_end:
ifound = t4
return ifound
func TreePrint()
t0 = a2
t1 = [a2 + 0]
t1 = [t1 + 76]
a2_stacksave = a2
v295 = t2
a2 = a2_stacksave
a3 = t0
t2 = call t1()
t3 = t2
t4 = 1
v296 = t4
return v296
func TreeRecPrint()
t0 = [a3 + 0]
t0 = [t0 + 32]
a3_stacksave = a3
a2_stacksave = a2
v298 = t1
a2 = a3_stacksave
t1 = call t0()
a3 = a3_stacksave
a2 = a2_stacksave
if0 t1 goto v298_else
t2 = [a2 + 0]
t2 = [t2 + 76]
t3 = [a3 + 0]
t3 = [t3 + 16]
a3_stacksave = a3
a2_stacksave = a2
v302 = t4
v299 = t2
a2 = a3_stacksave
t4 = call t3()
a3 = a3_stacksave
a2 = a2_stacksave
t2 = v299
a3_stacksave = a3
a2_stacksave = a2
v300 = t5
a2 = a2_stacksave
a3 = t4
t5 = call t2()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = t5
goto v298_end
v298_else:
s2 = 1
s1 = s2
v298_end:
s3 = [a3 + 0]
s3 = [s3 + 20]
a3_stacksave = a3
a2_stacksave = a2
v305 = s4
ntb = s1
a2 = a3_stacksave
s4 = call s3()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = ntb
print( s4)
s5 = [a3 + 0]
s5 = [s5 + 28]
a3_stacksave = a3
a2_stacksave = a2
v307 = s6
ntb = s1
a2 = a3_stacksave
s6 = call s5()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = ntb
if0 s6 goto v307_else
s7 = [a2 + 0]
s7 = [s7 + 76]
s8 = [a3 + 0]
s8 = [s8 + 12]
a3_stacksave = a3
a2_stacksave = a2
v311 = t0
v308 = s7
ntb = s1
a2 = a3_stacksave
t0 = call s8()
a2 = a2_stacksave
s7 = v308
s1 = ntb
a2_stacksave = a2
v309 = t1
ntb = s1
a2 = a2_stacksave
a3 = t0
t1 = call s7()
s1 = ntb
s1 = t1
goto v307_end
v307_else:
t3 = 1
s1 = t3
v307_end:
t4 = 1
v313 = t4
return v313
func Treeaccept()
t0 = 333
print( t0)
t1 = [a3 + 0]
t1 = [t1 + 0]
a3_stacksave = a3
a2_stacksave = a2
v316 = t2
a2 = a3_stacksave
a3 = a2_stacksave
t2 = call t1()
t3 = t2
t4 = 0
v317 = t4
return v317
func Visitorvisit()
t0 = [a3 + 0]
t0 = [t0 + 28]
a2_stacksave = a2
a3_stacksave = a3
v319 = t1
a2 = a3_stacksave
t1 = call t0()
a2 = a2_stacksave
a3 = a3_stacksave
if0 t1 goto v319_else
t2 = [a3 + 0]
t2 = [t2 + 12]
a2_stacksave = a2
a3_stacksave = a3
v322 = t3
a2 = a3_stacksave
t3 = call t2()
a2 = a2_stacksave
a3 = a3_stacksave
[a2 + 8] = t3
t4 = [a2 + 8]
t5 = [t4 + 0]
t5 = [t5 + 80]
a2_stacksave = a2
a3_stacksave = a3
v325 = s1
a2 = t4
a3 = a2_stacksave
s1 = call t5()
a2 = a2_stacksave
a3 = a3_stacksave
s2 = s1
goto v319_end
v319_else:
s3 = 0
s2 = s3
v319_end:
s4 = [a3 + 0]
s4 = [s4 + 32]
a2_stacksave = a2
a3_stacksave = a3
nti = s2
v328 = s5
a2 = a3_stacksave
s5 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
s2 = nti
if0 s5 goto v328_else
s6 = [a3 + 0]
s6 = [s6 + 16]
a2_stacksave = a2
a3_stacksave = a3
nti = s2
v331 = s7
a2 = a3_stacksave
s7 = call s6()
a2 = a2_stacksave
s2 = nti
[a2 + 4] = s7
s8 = [a2 + 4]
t0 = [s8 + 0]
t0 = [t0 + 80]
a2_stacksave = a2
nti = s2
v334 = t1
a2 = s8
a3 = a2_stacksave
t1 = call t0()
s2 = nti
s2 = t1
goto v328_end
v328_else:
t2 = 0
s2 = t2
v328_end:
t3 = 0
v336 = t3
return v336
func MyVisitorvisit()
t0 = [a3 + 0]
t0 = [t0 + 28]
a2_stacksave = a2
a3_stacksave = a3
v338 = t1
a2 = a3_stacksave
t1 = call t0()
a2 = a2_stacksave
a3 = a3_stacksave
if0 t1 goto v338_else
t2 = [a3 + 0]
t2 = [t2 + 12]
a2_stacksave = a2
a3_stacksave = a3
v341 = t3
a2 = a3_stacksave
t3 = call t2()
a2 = a2_stacksave
a3 = a3_stacksave
[a2 + 4] = t3
t4 = [a2 + 4]
t5 = [t4 + 0]
t5 = [t5 + 80]
a2_stacksave = a2
a3_stacksave = a3
v344 = s1
a2 = t4
a3 = a2_stacksave
s1 = call t5()
a2 = a2_stacksave
a3 = a3_stacksave
s2 = s1
goto v338_end
v338_else:
s3 = 0
s2 = s3
v338_end:
s4 = [a3 + 0]
s4 = [s4 + 20]
a2_stacksave = a2
a3_stacksave = a3
nti = s2
v347 = s5
a2 = a3_stacksave
s5 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
s2 = nti
print( s5)
s6 = [a3 + 0]
s6 = [s6 + 32]
a2_stacksave = a2
a3_stacksave = a3
nti = s2
v349 = s7
a2 = a3_stacksave
s7 = call s6()
a2 = a2_stacksave
a3 = a3_stacksave
s2 = nti
if0 s7 goto v349_else
s8 = [a3 + 0]
s8 = [s8 + 16]
a2_stacksave = a2
a3_stacksave = a3
nti = s2
v352 = t0
a2 = a3_stacksave
t0 = call s8()
a2 = a2_stacksave
s2 = nti
[a2 + 8] = t0
t1 = [a2 + 8]
t2 = [t1 + 0]
t2 = [t2 + 80]
a2_stacksave = a2
nti = s2
v355 = t3
a2 = t1
a3 = a2_stacksave
t3 = call t2()
s2 = nti
s2 = t3
goto v349_end
v349_else:
t5 = 0
s2 = t5
v349_end:
t4 = 0
v357 = t4
return v357