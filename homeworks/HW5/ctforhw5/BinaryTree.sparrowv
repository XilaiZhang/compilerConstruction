func BinaryTreemain()
t0 = 4
t1 = alloc( t0 )
t2 = 4
t3 = alloc( t2 )
t4 = @BTStart
[t3 + 0] = t4
[t1 + 0] = t3
if0 t1 goto v1Error
goto v1End
v1Error:
error("null pointer")
v1End:
t5 = [t1 + 0]
t5 = [t5 + 0]
v5 = s1
a2 = t1
s1 = call t5()
print( s1)
s2 = 0
trivial = s2
return trivial
func BTStart()
t0 = 28
t1 = alloc( t0 )
t2 = 80
t3 = alloc( t2 )
t4 = @TreeDelete
[t3 + 52] = t4
t5 = @TreeSetHas_Left
[t3 + 36] = t5
s1 = @TreeRemoveLeft
[t3 + 64] = s1
s2 = @TreeGetKey
[t3 + 20] = s2
s3 = @TreeSetRight
[t3 + 4] = s3
s4 = @TreeGetLeft
[t3 + 16] = s4
s5 = @TreeGetRight
[t3 + 12] = s5
s6 = @TreeRemove
[t3 + 56] = s6
s7 = @TreeSetLeft
[t3 + 8] = s7
s8 = @TreeInsert
[t3 + 48] = s8
t0 = @TreePrint
[t3 + 72] = t0
t2 = @TreeInit
[t3 + 0] = t2
t4 = @TreeGetHas_Right
[t3 + 28] = t4
t5 = @TreeGetHas_Left
[t3 + 32] = t5
s1 = @TreeRemoveRight
[t3 + 60] = s1
s2 = @TreeSearch
[t3 + 68] = s2
s3 = @TreeSetKey
[t3 + 24] = s3
s4 = @TreeCompare
[t3 + 44] = s4
s5 = @TreeSetHas_Right
[t3 + 40] = s5
s6 = @TreeRecPrint
[t3 + 76] = s6
[t1 + 0] = t3
if0 t1 goto v7Error
goto v7End
v7Error:
error("null pointer")
v7End:
s7 = t1
s8 = [s7 + 0]
s8 = [s8 + 0]
t0 = 16
v30 = t2
root = s7
a2 = s7
a3 = t0
t2 = call s8()
s7 = root
t4 = t2
t5 = [s7 + 0]
t5 = [t5 + 72]
v33 = s1
root = s7
ntb = t4
a2 = s7
s1 = call t5()
t4 = ntb
s7 = root
t4 = s1
s2 = 100000000
print( s2)
s3 = [s7 + 0]
s3 = [s3 + 48]
s4 = 8
root = s7
v36 = s5
ntb = t4
a2 = s7
a3 = s4
s5 = call s3()
t4 = ntb
s7 = root
t4 = s5
s6 = [s7 + 0]
s6 = [s6 + 72]
root = s7
v39 = t3
ntb = t4
a2 = s7
t3 = call s6()
t4 = ntb
s7 = root
t4 = t3
t1 = [s7 + 0]
t1 = [t1 + 48]
s8 = 24
root = s7
ntb = t4
v41 = t0
a2 = s7
a3 = s8
t0 = call t1()
t4 = ntb
s7 = root
t4 = t0
t2 = [s7 + 0]
t2 = [t2 + 48]
t5 = 4
root = s7
ntb = t4
v44 = s1
a2 = s7
a3 = t5
s1 = call t2()
t4 = ntb
s7 = root
t4 = s1
s2 = [s7 + 0]
s2 = [s2 + 48]
s3 = 12
root = s7
ntb = t4
v47 = s4
a2 = s7
a3 = s3
s4 = call s2()
t4 = ntb
s7 = root
t4 = s4
s5 = [s7 + 0]
s5 = [s5 + 48]
s6 = 20
v50 = t3
root = s7
ntb = t4
a2 = s7
a3 = s6
t3 = call s5()
t4 = ntb
s7 = root
t4 = t3
t1 = [s7 + 0]
t1 = [t1 + 48]
s8 = 28
v53 = t0
root = s7
ntb = t4
a2 = s7
a3 = s8
t0 = call t1()
t4 = ntb
s7 = root
t4 = t0
t2 = [s7 + 0]
t2 = [t2 + 48]
t5 = 14
v56 = s1
root = s7
ntb = t4
a2 = s7
a3 = t5
s1 = call t2()
t4 = ntb
s7 = root
t4 = s1
s2 = [s7 + 0]
s2 = [s2 + 72]
v59 = s3
root = s7
ntb = t4
a2 = s7
s3 = call s2()
t4 = ntb
s7 = root
t4 = s3
s4 = [s7 + 0]
s4 = [s4 + 68]
s6 = 24
v61 = s5
root = s7
ntb = t4
a2 = s7
a3 = s6
s5 = call s4()
t4 = ntb
s7 = root
print( s5)
t3 = [s7 + 0]
t3 = [t3 + 68]
t1 = 12
v64 = s8
root = s7
ntb = t4
a2 = s7
a3 = t1
s8 = call t3()
t4 = ntb
s7 = root
print( s8)
t0 = [s7 + 0]
t0 = [t0 + 68]
t2 = 16
v67 = t5
root = s7
ntb = t4
a2 = s7
a3 = t2
t5 = call t0()
t4 = ntb
s7 = root
print( t5)
s1 = [s7 + 0]
s1 = [s1 + 68]
s2 = 50
v70 = s3
root = s7
ntb = t4
a2 = s7
a3 = s2
s3 = call s1()
t4 = ntb
s7 = root
print( s3)
s4 = [s7 + 0]
s4 = [s4 + 68]
s6 = 12
v73 = s5
root = s7
ntb = t4
a2 = s7
a3 = s6
s5 = call s4()
t4 = ntb
s7 = root
print( s5)
t3 = [s7 + 0]
t3 = [t3 + 52]
t1 = 12
v76 = s8
root = s7
ntb = t4
a2 = s7
a3 = t1
s8 = call t3()
t4 = ntb
s7 = root
t4 = s8
t0 = [s7 + 0]
t0 = [t0 + 72]
root = s7
v79 = t2
ntb = t4
a2 = s7
t2 = call t0()
t4 = ntb
s7 = root
t4 = t2
t5 = [s7 + 0]
t5 = [t5 + 68]
s1 = 12
v81 = s2
a2 = s7
a3 = s1
s2 = call t5()
print( s2)
s3 = 0
v83 = s3
return v83
func TreeInit()
[a2 + 12] = a3
t0 = 0
[a2 + 16] = t0
t1 = 0
[a2 + 20] = t1
t2 = 1
v89 = t2
return v89
func TreeSetRight()
[a2 + 8] = a3
t0 = 1
v91 = t0
return v91
func TreeSetLeft()
[a2 + 4] = a3
t0 = 1
v93 = t0
return v93
func TreeGetRight()
t0 = [a2 + 8]
v94 = t0
return v94
func TreeGetLeft()
t0 = [a2 + 4]
v95 = t0
return v95
func TreeGetKey()
t0 = [a2 + 12]
v96 = t0
return v96
func TreeSetKey()
[a2 + 12] = a3
t0 = 1
v98 = t0
return v98
func TreeGetHas_Right()
t0 = [a2 + 20]
v99 = t0
return v99
func TreeGetHas_Left()
t0 = [a2 + 16]
v100 = t0
return v100
func TreeSetHas_Left()
[a2 + 16] = a3
t0 = 1
v102 = t0
return v102
func TreeSetHas_Right()
[a2 + 20] = a3
t0 = 1
v104 = t0
return v104
func TreeCompare()
t0 = 0
t1 = t0
t2 = 1
t3 = a4 + t2
t4 = t3
t5 = a3 < a4
if0 t5 goto v108_else
s1 = 0
t1 = s1
goto v108_end
v108_else:
s2 = a3 < t4
s3 = 1
s4 = s3 - s2
if0 s4 goto v112_else
s5 = 0
t1 = s5
goto v112_end
v112_else:
s6 = 1
t1 = s6
v112_end:
v108_end:
ntb = t1
return ntb
func TreeInsert()
t0 = 28
t1 = alloc( t0 )
t2 = 80
t3 = alloc( t2 )
t4 = @TreeDelete
[t3 + 52] = t4
t5 = @TreeSetHas_Left
[t3 + 36] = t5
s1 = @TreeRemoveLeft
[t3 + 64] = s1
s2 = @TreeGetKey
[t3 + 20] = s2
s3 = @TreeSetRight
[t3 + 4] = s3
s4 = @TreeGetLeft
[t3 + 16] = s4
s5 = @TreeGetRight
[t3 + 12] = s5
s6 = @TreeRemove
[t3 + 56] = s6
s7 = @TreeSetLeft
[t3 + 8] = s7
s8 = @TreeInsert
[t3 + 48] = s8
t0 = @TreePrint
[t3 + 72] = t0
t2 = @TreeInit
[t3 + 0] = t2
t4 = @TreeGetHas_Right
[t3 + 28] = t4
t5 = @TreeGetHas_Left
[t3 + 32] = t5
s1 = @TreeRemoveRight
[t3 + 60] = s1
s2 = @TreeSearch
[t3 + 68] = s2
s3 = @TreeSetKey
[t3 + 24] = s3
s4 = @TreeCompare
[t3 + 44] = s4
s5 = @TreeSetHas_Right
[t3 + 40] = s5
s6 = @TreeRecPrint
[t3 + 76] = s6
[t1 + 0] = t3
if0 t1 goto v116Error
goto v116End
v116Error:
error("null pointer")
v116End:
s7 = t1
s8 = [s7 + 0]
s8 = [s8 + 0]
a2_stacksave = a2
a3_stacksave = a3
new_node = s7
v139 = t0
a2 = s7
a3 = a3_stacksave
t0 = call s8()
a2 = a2_stacksave
a3 = a3_stacksave
s7 = new_node
t2 = t0
t4 = a2
t5 = 1
s1 = t5
loopv141:
if0 s1 goto v141_end
s8 = [t4 + 0]
s8 = [s8 + 20]
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
s6 = call s8()
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t1 = s6
t3 = a3 < t1
if0 t3 goto v144_else
s4 = [t4 + 0]
s4 = [s4 + 32]
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
s5 = call s4()
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
if0 s5 goto v146_else
s2 = [t4 + 0]
s2 = [s2 + 16]
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
s3 = call s2()
a3 = a3_stacksave
t4 = current_node
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t4 = s3
goto v146_end
v146_else:
 s9 = 0
v149 = s9
s1 = v149
 s10 = [t4 + 0]
v150 = s10
s9 = v150
 s10 = [s9 + 36]
v150 = s10
 s9 = 1
v152 = s9
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
a3 = v152
s9 = v150
s10 = call s9()
v151 = s10
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t2 = v151
 s10 = [t4 + 0]
v153 = s10
s9 = v153
 s10 = [s9 + 8]
v153 = s10
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
a3 = s7
s9 = v153
s10 = call s9()
v154 = s10
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t2 = v154
v146_end:
goto v144_end
v144_else:
 s10 = [t4 + 0]
v155 = s10
s9 = v155
 s10 = [s9 + 28]
v155 = s10
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
s9 = v155
s10 = call s9()
v156 = s10
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
s9 = v156
if0 s9 goto v156_else
 s10 = [t4 + 0]
v157 = s10
s9 = v157
 s10 = [s9 + 12]
v157 = s10
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
s9 = v157
s10 = call s9()
v158 = s10
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t4 = v158
goto v156_end
v156_else:
 s9 = 0
v159 = s9
s1 = v159
 s10 = [t4 + 0]
v160 = s10
s9 = v160
 s10 = [s9 + 40]
v160 = s10
t5 = 1
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
a3 = t5
s9 = v160
t0 = call s9()
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t2 = t0
 s10 = [t4 + 0]
v163 = s10
s9 = v163
 s10 = [s9 + 4]
v163 = s10
a3_stacksave = a3
v161 = t0
v162 = t5
current_node = t4
v147 = s2
v148 = s3
v145 = s4
v146 = s5
v143 = s6
v144 = t3
key_aux = t1
v142 = s8
new_node = s7
cont = s1
ntb = t2
a2 = t4
a3 = s7
s9 = v163
s10 = call s9()
v164 = s10
a3 = a3_stacksave
t4 = current_node
s3 = v148
t5 = v162
s4 = v145
s5 = v146
s6 = v143
s7 = new_node
s8 = v142
t0 = v161
t1 = key_aux
s1 = cont
t2 = ntb
s2 = v147
t3 = v144
t2 = v164
v156_end:
v144_end:
goto loopv141
v141_end:
t4 = 1
v165 = t4
return v165
func TreeDelete()
t0 = a2
t1 = a2
t2 = 1
t3 = t2
t4 = 0
t5 = t4
s1 = 1
s2 = s1
loopv169:
if0 t3 goto v169_end
 s10 = [t0 + 0]
v170 = s10
s9 = v170
 s10 = [s9 + 20]
v170 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v170
s10 = call s9()
v171 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
s9 = v171
key_aux = s9
s10 = key_aux
 s11 = a3 < s10
v172 = s11
s9 = v172
if0 s9 goto v172_else
 s10 = [t0 + 0]
v173 = s10
s9 = v173
 s10 = [s9 + 32]
v173 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v173
s10 = call s9()
v174 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
s9 = v174
if0 s9 goto v174_else
t1 = t0
 s10 = [t0 + 0]
v175 = s10
s9 = v175
 s10 = [s9 + 16]
v175 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v175
s10 = call s9()
v176 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
t0 = v176
goto v174_end
v174_else:
 s9 = 0
v177 = s9
t3 = v177
v174_end:
goto v172_end
v172_else:
s9 = key_aux
 s11 = s9 < a3
v178 = s11
s9 = v178
if0 s9 goto v178_else
 s10 = [t0 + 0]
v179 = s10
s9 = v179
 s10 = [s9 + 28]
v179 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s9 = v179
s7 = call s9()
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
if0 s7 goto v180_else
t1 = t0
s5 = [t0 + 0]
s5 = [s5 + 12]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s6 = call s5()
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
t0 = s6
goto v180_end
v180_else:
s3 = 0
t3 = s3
v180_end:
goto v178_end
v178_else:
if0 s2 goto is_root_else
s4 = [t0 + 0]
s4 = [s4 + 28]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s10 = call s4()
v185 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
 s9 = 1
v186 = s9
s9 = v186
s10 = v185
t4 = s9 - s10
s1 = [t0 + 0]
s1 = [s1 + 32]
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = t0
s8 = call s1()
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
 s9 = 1
v190 = s9
s9 = v190
 s11 = s9 - s8
v191 = s11
s10 = v191
 s11 = t4 * s10
v192 = s11
s9 = v192
if0 s9 goto v192_else
 s9 = 1
v193 = s9
s9 = v193
ntb = s9
goto v192_end
v192_else:
 s10 = [a2 + 0]
v194 = s10
s9 = v194
 s10 = [s9 + 56]
v194 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = a2_stacksave
a3 = t1
a4 = t0
s9 = v194
s10 = call s9()
v195 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
s9 = v195
ntb = s9
v192_end:
goto is_root_end
is_root_else:
 s10 = [a2 + 0]
v196 = s10
s9 = v196
 s10 = [s9 + 56]
v196 = s10
a2_stacksave = a2
a3_stacksave = a3
v183 = s3
v184 = s4
v181 = s5
current_node = t0
v182 = s6
v180 = s7
v189 = s8
v200 = t2
is_root = s2
v187 = t4
v188 = s1
found = t5
parent_node = t1
cont = t3
a2 = a2_stacksave
a3 = t1
a4 = t0
s9 = v196
s10 = call s9()
v197 = s10
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v183
t4 = v187
s4 = v184
t5 = found
s5 = v181
s6 = v182
s7 = v180
s8 = v189
t0 = current_node
t1 = parent_node
t2 = v200
s1 = v188
s2 = is_root
t3 = cont
s9 = v197
ntb = s9
is_root_end:
 s9 = 1
v198 = s9
t5 = v198
 s9 = 0
v199 = s9
t3 = v199
v178_end:
v172_end:
t2 = 0
s2 = t2
goto loopv169
v169_end:
found = t5
return found
func TreeRemove()
t0 = [a4 + 0]
t0 = [t0 + 32]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v202 = t1
a2 = a4_stacksave
t1 = call t0()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
if0 t1 goto v202_else
t2 = [a2 + 0]
t2 = [t2 + 64]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v204 = t3
a2 = a2_stacksave
a3 = a3_stacksave
a4 = a4_stacksave
t3 = call t2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = t3
goto v202_end
v202_else:
t5 = [a4 + 0]
t5 = [t5 + 28]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
ntb = t4
v206 = s1
a2 = a4_stacksave
s1 = call t5()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
if0 s1 goto v206_else
s2 = [a2 + 0]
s2 = [s2 + 60]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
ntb = t4
v208 = s3
a2 = a2_stacksave
a3 = a3_stacksave
a4 = a4_stacksave
s3 = call s2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s3
goto v206_end
v206_else:
s4 = [a4 + 0]
s4 = [s4 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
ntb = t4
v210 = s5
a2 = a4_stacksave
s5 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = s5
s7 = [a3 + 0]
s7 = [s7 + 16]
a2_stacksave = a2
a3_stacksave = a3
auxkey1 = s6
ntb = t4
v212 = s8
a2 = a3_stacksave
s8 = call s7()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = auxkey1
t0 = [s8 + 0]
t0 = [t0 + 20]
a2_stacksave = a2
a3_stacksave = a3
auxkey1 = s6
ntb = t4
v214 = t1
a2 = s8
t1 = call t0()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
s6 = auxkey1
t2 = t1
t3 = [a2 + 0]
t3 = [t3 + 44]
a2_stacksave = a2
a3_stacksave = a3
v216 = t5
ntb = t4
a2 = a2_stacksave
a3 = s6
a4 = t2
t5 = call t3()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
if0 t5 goto v216_else
s1 = [a3 + 0]
s1 = [s1 + 8]
s2 = [a2 + 24]
a2_stacksave = a2
a3_stacksave = a3
v218 = s3
ntb = t4
a2 = a3_stacksave
a3 = s2
s3 = call s1()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s3
s4 = [a3 + 0]
s4 = [s4 + 36]
s5 = 0
a2_stacksave = a2
a3_stacksave = a3
v221 = s7
ntb = t4
a2 = a3_stacksave
a3 = s5
s7 = call s4()
a2 = a2_stacksave
a3 = a3_stacksave
t4 = ntb
t4 = s7
goto v216_end
v216_else:
t0 = [a3 + 0]
t0 = [t0 + 4]
s8 = [a2 + 24]
a3_stacksave = a3
v224 = t1
ntb = t4
a2 = a3_stacksave
a3 = s8
t1 = call t0()
a3 = a3_stacksave
t4 = ntb
t4 = t1
s6 = [a3 + 0]
s6 = [s6 + 40]
t2 = 0
a3_stacksave = a3
ntb = t4
v227 = t3
a2 = a3_stacksave
a3 = t2
t3 = call s6()
t4 = ntb
t4 = t3
v216_end:
v206_end:
v202_end:
t5 = 1
v229 = t5
return v229
func TreeRemoveRight()
loopv230:
t4 = [a4 + 0]
t4 = [t4 + 28]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v235 = t0
v236 = t1
v233 = t2
v234 = t3
v231 = t4
v232 = t5
v240 = s1
v239 = s2
v237 = s3
v238 = s4
ntb = s5
a2 = a4_stacksave
t5 = call t4()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v231
s3 = v237
s4 = v238
s5 = ntb
t0 = v235
t1 = v236
t2 = v233
s1 = v240
t3 = v234
s2 = v239
if0 t5 goto v230_end
t2 = [a4 + 0]
t2 = [t2 + 24]
t0 = [a4 + 0]
t0 = [t0 + 12]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v235 = t0
v236 = t1
v233 = t2
v234 = t3
v231 = t4
v232 = t5
v240 = s1
v239 = s2
v237 = s3
v238 = s4
ntb = s5
a2 = a4_stacksave
t1 = call t0()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v231
s3 = v237
t5 = v232
s4 = v238
s5 = ntb
t0 = v235
t2 = v233
s1 = v240
t3 = v234
s2 = v239
s3 = [t1 + 0]
s3 = [s3 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v235 = t0
v236 = t1
v233 = t2
v234 = t3
v231 = t4
v232 = t5
v240 = s1
v239 = s2
v237 = s3
v238 = s4
ntb = s5
a2 = t1
s4 = call s3()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v231
s3 = v237
t5 = v232
s5 = ntb
t0 = v235
t1 = v236
t2 = v233
s1 = v240
t3 = v234
s2 = v239
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v235 = t0
v236 = t1
v233 = t2
v234 = t3
v231 = t4
v232 = t5
v240 = s1
v239 = s2
v237 = s3
v238 = s4
ntb = s5
a2 = a4_stacksave
a3 = s4
t3 = call t2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v231
s3 = v237
t5 = v232
s4 = v238
s5 = ntb
t0 = v235
t1 = v236
t2 = v233
s1 = v240
s2 = v239
s5 = t3
a3 = a4
s2 = [a4 + 0]
s2 = [s2 + 12]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v235 = t0
v236 = t1
v233 = t2
v234 = t3
v231 = t4
v232 = t5
v240 = s1
v239 = s2
v237 = s3
v238 = s4
ntb = s5
a2 = a4_stacksave
s1 = call s2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v231
s3 = v237
t5 = v232
s4 = v238
s5 = ntb
t0 = v235
t1 = v236
t2 = v233
t3 = v234
s2 = v239
a4 = s1
goto loopv230
v230_end:
s6 = [a3 + 0]
s6 = [s6 + 4]
s7 = [a2 + 24]
a3_stacksave = a3
v242 = s8
ntb = s5
a2 = a3_stacksave
a3 = s7
s8 = call s6()
a3 = a3_stacksave
s5 = ntb
s5 = s8
t0 = [a3 + 0]
t0 = [t0 + 40]
t1 = 0
a3_stacksave = a3
v245 = t2
ntb = s5
a2 = a3_stacksave
a3 = t1
t2 = call t0()
s5 = ntb
s5 = t2
t3 = 1
v247 = t3
return v247
func TreeRemoveLeft()
loopv248:
s4 = [a4 + 0]
s4 = [s4 + 32]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v250 = t0
v257 = t1
v258 = t2
v255 = t3
v256 = t4
v253 = t5
v254 = s1
v251 = s2
v252 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
t0 = call s4()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v256
s3 = v252
t5 = v253
s4 = v249
s5 = ntb
t1 = v257
t2 = v258
s1 = v254
t3 = v255
s2 = v251
if0 t0 goto v248_end
s2 = [a4 + 0]
s2 = [s2 + 24]
t5 = [a4 + 0]
t5 = [t5 + 16]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v250 = t0
v257 = t1
v258 = t2
v255 = t3
v256 = t4
v253 = t5
v254 = s1
v251 = s2
v252 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
s1 = call t5()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v256
s3 = v252
t5 = v253
s4 = v249
s5 = ntb
t0 = v250
t1 = v257
t2 = v258
t3 = v255
s2 = v251
t3 = [s1 + 0]
t3 = [t3 + 20]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v250 = t0
v257 = t1
v258 = t2
v255 = t3
v256 = t4
v253 = t5
v254 = s1
v251 = s2
v252 = s3
v249 = s4
ntb = s5
a2 = s1
t4 = call t3()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
s3 = v252
t5 = v253
s4 = v249
s5 = ntb
t0 = v250
t1 = v257
t2 = v258
s1 = v254
t3 = v255
s2 = v251
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v250 = t0
v257 = t1
v258 = t2
v255 = t3
v256 = t4
v253 = t5
v254 = s1
v251 = s2
v252 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
a3 = t4
s3 = call s2()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v256
t5 = v253
s4 = v249
s5 = ntb
t0 = v250
t1 = v257
t2 = v258
s1 = v254
t3 = v255
s2 = v251
s5 = s3
a3 = a4
t1 = [a4 + 0]
t1 = [t1 + 16]
a4_stacksave = a4
a2_stacksave = a2
a3_stacksave = a3
v250 = t0
v257 = t1
v258 = t2
v255 = t3
v256 = t4
v253 = t5
v254 = s1
v251 = s2
v252 = s3
v249 = s4
ntb = s5
a2 = a4_stacksave
t2 = call t1()
a4 = a4_stacksave
a2 = a2_stacksave
a3 = a3_stacksave
t4 = v256
s3 = v252
t5 = v253
s4 = v249
s5 = ntb
t0 = v250
t1 = v257
s1 = v254
t3 = v255
s2 = v251
a4 = t2
goto loopv248
v248_end:
s6 = [a3 + 0]
s6 = [s6 + 8]
s7 = [a2 + 24]
a3_stacksave = a3
v260 = s8
ntb = s5
a2 = a3_stacksave
a3 = s7
s8 = call s6()
a3 = a3_stacksave
s5 = ntb
s5 = s8
t0 = [a3 + 0]
t0 = [t0 + 36]
t1 = 0
a3_stacksave = a3
v263 = t2
ntb = s5
a2 = a3_stacksave
a3 = t1
t2 = call t0()
s5 = ntb
s5 = t2
t3 = 1
v265 = t3
return v265
func TreeSearch()
t0 = a2
t1 = 1
t2 = t1
t3 = 0
t4 = t3
loopv268:
if0 t2 goto v268_end
s8 = [t0 + 0]
s8 = [s8 + 20]
a3_stacksave = a3
v271 = t5
v282 = s1
v272 = s2
v283 = s3
v280 = s4
current_node = t0
v270 = s5
v281 = s6
ifound = t4
v279 = s7
v269 = s8
v277 = t1
v278 = t3
cont = t2
a2 = t0
s5 = call s8()
a3 = a3_stacksave
s3 = v283
t4 = ifound
t5 = v271
s4 = v280
s6 = v281
s7 = v279
s8 = v269
t0 = current_node
t1 = v277
s1 = v282
t2 = cont
s2 = v272
t3 = v278
s9 = s5
key_aux = s9
s10 = key_aux
t5 = a3 < s10
if0 t5 goto v271_else
s2 = [t0 + 0]
s2 = [s2 + 32]
a3_stacksave = a3
v271 = t5
v282 = s1
v272 = s2
v283 = s3
v280 = s4
current_node = t0
v270 = s5
v281 = s6
ifound = t4
v279 = s7
v269 = s8
v277 = t1
v278 = t3
cont = t2
a2 = t0
s10 = call s2()
v273 = s10
a3 = a3_stacksave
s3 = v283
t4 = ifound
t5 = v271
s4 = v280
s5 = v270
s6 = v281
s7 = v279
s8 = v269
t0 = current_node
t1 = v277
s1 = v282
t2 = cont
s2 = v272
t3 = v278
s9 = v273
if0 s9 goto v273_else
 s10 = [t0 + 0]
v274 = s10
s9 = v274
 s10 = [s9 + 16]
v274 = s10
a3_stacksave = a3
v271 = t5
v282 = s1
v272 = s2
v283 = s3
v280 = s4
current_node = t0
v270 = s5
v281 = s6
ifound = t4
v279 = s7
v269 = s8
v277 = t1
v278 = t3
cont = t2
a2 = t0
s9 = v274
s10 = call s9()
v275 = s10
a3 = a3_stacksave
s3 = v283
t4 = ifound
t5 = v271
s4 = v280
s5 = v270
s6 = v281
s7 = v279
s8 = v269
t0 = current_node
t1 = v277
s1 = v282
t2 = cont
s2 = v272
t3 = v278
t0 = v275
goto v273_end
v273_else:
 s9 = 0
v276 = s9
t2 = v276
v273_end:
goto v271_end
v271_else:
s9 = key_aux
t1 = s9 < a3
if0 t1 goto v277_else
t3 = [t0 + 0]
t3 = [t3 + 28]
a3_stacksave = a3
v271 = t5
v282 = s1
v272 = s2
v283 = s3
v280 = s4
current_node = t0
v270 = s5
v281 = s6
ifound = t4
v279 = s7
v269 = s8
v277 = t1
v278 = t3
cont = t2
a2 = t0
s7 = call t3()
a3 = a3_stacksave
s3 = v283
t4 = ifound
t5 = v271
s4 = v280
s5 = v270
s6 = v281
s8 = v269
t0 = current_node
t1 = v277
s1 = v282
t2 = cont
s2 = v272
t3 = v278
if0 s7 goto v279_else
s4 = [t0 + 0]
s4 = [s4 + 12]
a3_stacksave = a3
v271 = t5
v282 = s1
v272 = s2
v283 = s3
v280 = s4
current_node = t0
v270 = s5
v281 = s6
ifound = t4
v279 = s7
v269 = s8
v277 = t1
v278 = t3
cont = t2
a2 = t0
s6 = call s4()
a3 = a3_stacksave
s3 = v283
t4 = ifound
t5 = v271
s4 = v280
s5 = v270
s7 = v279
s8 = v269
t0 = current_node
t1 = v277
s1 = v282
t2 = cont
s2 = v272
t3 = v278
t0 = s6
goto v279_end
v279_else:
s1 = 0
t2 = s1
v279_end:
goto v277_end
v277_else:
s3 = 1
t4 = s3
 s9 = 0
v284 = s9
t2 = v284
v277_end:
v271_end:
goto loopv268
v268_end:
ifound = t4
return ifound
func TreePrint()
t0 = a2
t1 = [a2 + 0]
t1 = [t1 + 76]
a2_stacksave = a2
v286 = t2
a2 = a2_stacksave
a3 = t0
t2 = call t1()
t3 = t2
t4 = 1
v287 = t4
return v287
func TreeRecPrint()
t0 = [a3 + 0]
t0 = [t0 + 32]
a3_stacksave = a3
a2_stacksave = a2
v289 = t1
a2 = a3_stacksave
t1 = call t0()
a3 = a3_stacksave
a2 = a2_stacksave
if0 t1 goto v289_else
t2 = [a2 + 0]
t2 = [t2 + 76]
t3 = [a3 + 0]
t3 = [t3 + 16]
a3_stacksave = a3
a2_stacksave = a2
v293 = t4
v290 = t2
a2 = a3_stacksave
t4 = call t3()
a3 = a3_stacksave
a2 = a2_stacksave
t2 = v290
a3_stacksave = a3
a2_stacksave = a2
v291 = t5
a2 = a2_stacksave
a3 = t4
t5 = call t2()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = t5
goto v289_end
v289_else:
s2 = 1
s1 = s2
v289_end:
s3 = [a3 + 0]
s3 = [s3 + 20]
a3_stacksave = a3
a2_stacksave = a2
v296 = s4
ntb = s1
a2 = a3_stacksave
s4 = call s3()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = ntb
print( s4)
s5 = [a3 + 0]
s5 = [s5 + 28]
a3_stacksave = a3
a2_stacksave = a2
v298 = s6
ntb = s1
a2 = a3_stacksave
s6 = call s5()
a3 = a3_stacksave
a2 = a2_stacksave
s1 = ntb
if0 s6 goto v298_else
s7 = [a2 + 0]
s7 = [s7 + 76]
s8 = [a3 + 0]
s8 = [s8 + 12]
a3_stacksave = a3
a2_stacksave = a2
v302 = t0
v299 = s7
ntb = s1
a2 = a3_stacksave
t0 = call s8()
a2 = a2_stacksave
s7 = v299
s1 = ntb
a2_stacksave = a2
v300 = t1
ntb = s1
a2 = a2_stacksave
a3 = t0
t1 = call s7()
s1 = ntb
s1 = t1
goto v298_end
v298_else:
t3 = 1
s1 = t3
v298_end:
t4 = 1
v304 = t4
return v304
