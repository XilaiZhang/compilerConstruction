func LinearSearchmain()
t0 = 12
t1 = alloc( t0 )
t2 = 16
t3 = alloc( t2 )
t4 = @LSPrint
[t3 + 4] = t4
t5 = @LSInit
[t3 + 12] = t5
s1 = @LSStart
[t3 + 0] = s1
s2 = @LSSearch
[t3 + 8] = s2
[t1 + 0] = t3
if0 t1 goto v1Error
goto v1End
v1Error:
error("null pointer")
v1End:
s3 = [t1 + 0]
s3 = [s3 + 0]
s4 = 10
v8 = s5
a2 = t1
a3 = s4
s5 = call s3()
print( s5)
s6 = 0
trivial = s6
return trivial
func LSStart()
t0 = [a2 + 0]
t0 = [t0 + 12]
a3_stacksave = a3
a2_stacksave = a2
v11 = t1
a2 = a2_stacksave
a3 = a3_stacksave
t1 = call t0()
a2 = a2_stacksave
t2 = t1
t3 = [a2 + 0]
t3 = [t3 + 4]
a2_stacksave = a2
v13 = t4
a2 = a2_stacksave
t4 = call t3()
a2 = a2_stacksave
t5 = t4
s1 = 9999
print( s1)
s2 = [a2 + 0]
s2 = [s2 + 8]
s3 = 8
a2_stacksave = a2
v16 = s4
a2 = a2_stacksave
a3 = s3
s4 = call s2()
a2 = a2_stacksave
print( s4)
s5 = [a2 + 0]
s5 = [s5 + 8]
s6 = 12
a2_stacksave = a2
v19 = s7
a2 = a2_stacksave
a3 = s6
s7 = call s5()
a2 = a2_stacksave
print( s7)
s8 = [a2 + 0]
s8 = [s8 + 8]
t0 = 17
a2_stacksave = a2
v22 = t1
a2 = a2_stacksave
a3 = t0
t1 = call s8()
a2 = a2_stacksave
print( t1)
t3 = [a2 + 0]
t3 = [t3 + 8]
t4 = 50
a2_stacksave = a2
v25 = s1
a2 = a2_stacksave
a3 = t4
s1 = call t3()
print( s1)
s2 = 55
v27 = s2
return v27
func LSPrint()
t0 = 1
t1 = t0
loopv29:
t2 = [a2 + 8]
s2 = t1 < t2
if0 s2 goto v29_end
t5 = [a2 + 4]
s5 = 4
s4 = 5
s7 = s5 - s4
s6 = s7 < t1
t0 = [t5 + 0]
s8 = t1 < t0
 s11 = s6 * s8
v39 = s11
s9 = v39
if0 s9 goto v36Error
goto v36End
v36Error:
error("array index out of bounds")
v36End:
t4 = s5 * t1
t4 = t4 + s5
t3 = t5 + t4
t3 = [t3 + 0]
print( t3)
s3 = 1
s1 = t1 + s3
t1 = s1
goto loopv29
v29_end:
t1 = 0
v44 = t1
return v44
func LSSearch()
t0 = 1
t1 = t0
t2 = 0
t3 = t2
t4 = 0
t5 = t4
loopv48:
 s10 = [a2 + 8]
v49 = s10
s10 = v49
s5 = t1 < s10
if0 s5 goto v48_end
t0 = [a2 + 4]
s8 = 4
 s9 = 5
v53 = s9
s10 = v53
t4 = s8 - s10
 s11 = t4 < t1
v55 = s11
 s10 = [t0 + 0]
v56 = s10
s10 = v56
 s11 = t1 < s10
v57 = s11
s9 = v55
s10 = v57
 s11 = s9 * s10
v58 = s11
s9 = v58
if0 s9 goto v55Error
goto v55End
v55Error:
error("array index out of bounds")
v55End:
 s11 = s8 * t1
v59 = s11
s9 = v59
 s11 = s9 + s8
v59 = s11
s10 = v59
 s11 = t0 + s10
v60 = s11
s9 = v60
 s10 = [s9 + 0]
v60 = s10
s2 = v60
 s9 = 1
v61 = s9
s10 = v61
 s11 = a3 + s10
v62 = s11
s3 = v62
 s11 = s2 < a3
v63 = s11
s9 = v63
if0 s9 goto v63_else
 s9 = 0
v64 = s9
s1 = v64
goto v63_end
v63_else:
 s11 = s2 < s3
v65 = s11
 s9 = 1
v66 = s9
s9 = v66
s10 = v65
 s11 = s9 - s10
v67 = s11
s9 = v67
if0 s9 goto v67_else
 s9 = 0
v68 = s9
s1 = v68
goto v67_end
v67_else:
 s9 = 1
v69 = s9
t3 = v69
s4 = 1
t5 = s4
s7 = [a2 + 8]
t1 = s7
v67_end:
v63_end:
s6 = 1
t2 = t1 + s6
t1 = t2
goto loopv48
v48_end:
ifound = t5
return ifound
func LSInit()
[a2 + 8] = a3
t0 = 1
t1 = 4
t2 = a3 + t0
t2 = t2 * t1
t3 = alloc( t2 )
if0 t3 goto v79Error
goto v79End
v79Error:
error("null pointer")
v79End:
[t3 + 0] = a3
[a2 + 4] = t3
t4 = 1
t5 = t4
s1 = [a2 + 8]
s2 = 1
s3 = s1 + s2
s4 = s3
loopv84:
 s10 = [a2 + 8]
v85 = s10
s10 = v85
 s11 = t5 < s10
v86 = s11
s9 = v86
if0 s9 goto v84_end
 s9 = 2
v87 = s9
s9 = v87
 s11 = s9 * t5
v88 = s11
s5 = v88
 s9 = 3
v89 = s9
s10 = v89
t2 = s4 - s10
t0 = t2
s1 = s5 + t0
t4 = [a2 + 4]
s3 = 4
s2 = 5
 s11 = s3 - s2
v95 = s11
s9 = v95
 s11 = s9 < t5
v96 = s11
 s10 = [t4 + 0]
v97 = s10
s10 = v97
 s11 = t5 < s10
v98 = s11
s9 = v96
s10 = v98
 s11 = s9 * s10
v99 = s11
s9 = v99
if0 s9 goto v96Error
goto v96End
v96Error:
error("array index out of bounds")
v96End:
t3 = s3 * t5
t3 = t3 + s3
s8 = t4 + t3
[s8 + 0] = s1
t1 = 1
s6 = t5 + t1
t5 = s6
s7 = 1
 s11 = s4 - s7
v105 = s11
s4 = v105
goto loopv84
v84_end:
s5 = 0
v106 = s5
return v106