  .equiv @sbrk, 9
  .equiv @print_string, 4
  .equiv @print_char, 11
  .equiv @print_int, 1
  .equiv @exit 10
  .equiv @exit2, 17


.text

  jal Main                                 # Jump to main
  li a0, @exit                             # Code for ecall: exit
  ecall

.globl Main
Main:
  sw fp, -8(sp)                        # Store old frame pointer
  mv fp, sp                            # Set new fp
  li t6, 16
  sub sp, sp, t6                       # Allocate a new frame of size 16 bytes
  sw ra, -4(fp)                        # Store return address
  li t0, 4
  sw t0, -12(fp)
  lw t1, -12(fp)
  mv a0, t1 				# Move requested size to a0
  jal alloc 				# Call alloc subroutine to request heap memory
  mv t0, a0 				# Move the returned pointer to t0
  sw t0, -16(fp)
  lw t1, -12(fp)
  mv a0, t1 				# Move requested size to a0
  jal alloc 				# Call alloc subroutine to request heap memory
  mv s1, a0 				# Move the returned pointer to s1
  la t0, FacComputeFac
  sw t0, -12(fp)
  lw t1, -12(fp)
  sw t1, 0(s1)
  sw s1, -12(fp)
  lw t0, -16(fp)
  lw t1, -12(fp)
  sw t1, 0(t0)
  lw t0, -16(fp)
  beqz t0, null1 			# Branch jump to null1 if t0 is zero
  lw t1, -16(fp)
  lw s2, 0(t1)
  lw s2, 0(s2)
  li t0, 6
  sw t0, -12(fp)
  li t6, 8 				# Dynamically allocate out array on the stack upon calling
  sub sp, sp, t6
  lw t6, -16(fp) 			# Load value to t6
  sw t6, 0(sp) 				# Push argument onto the stack
  lw t6, -12(fp) 			# Load value to t6
  sw t6, 4(sp) 				# Push argument onto the stack
  jalr s2
  mv s3, a0 				# Move return value from a0
  mv a1, s3 				# Mov the content to be printed to a1
  li a0, @print_int 				# Load the code for print_int to a0
  ecall 				# Print the number
  j main_end
null1:
  la a0, msg_0 				# Load the address of the error message to a0
  j error
main_end:
  lw a0, -12(fp) 				# Load return value to a0
  lw ra, -4(fp)                        # Restore ra register
  lw fp, -8(fp)                        # Restore old fp
  addi sp, sp, 16
  addi sp, sp, 0
  jr ra                                # Return

.globl FacComputeFac
FacComputeFac:
  sw fp, -8(sp)                        # Store old frame pointer
  mv fp, sp                            # Set new fp
  li t6, 32
  sub sp, sp, t6                       # Allocate a new frame of size 32 bytes
  sw ra, -4(fp)                        # Store return address
  sw s1, -12(fp)
  sw s2, -16(fp)
  sw s3, -20(fp)
  sw s4, -24(fp)
  li s1, 1
  lw t1, 4(fp)
  slt s2, t1, s1 				# s2 = t1 - s1
  beqz s2, if1_else 				# Branch jump to if1_else if s2 is zero
  li t0, 1
  sw t0, -28(fp)
  j if1_end
if1_else:
  lw t1, 0(fp)
  lw s3, 0(t1)
  lw s3, 0(s3)
  li s1, 1
  lw t1, 4(fp)
  sub t0, t1, s1 				# t0 = t1 - s1
  sw t0, -32(fp)
  li t6, 8 				# Dynamically allocate out array on the stack upon calling
  sub sp, sp, t6
  lw t6, 0(fp) 				# Load value to t6
  sw t6, 0(sp) 				# Push argument onto the stack
  lw t6, -32(fp) 				# Load value to t6
  sw t6, 4(sp) 				# Push argument onto the stack
  jalr s3
  mv s4, a0 				# Move return value from a0
  lw t1, 4(fp)
  mul t0, t1, s4 				# t0 = t1 - s4
  sw t0, -28(fp)
if1_end:
  lw s1, -12(fp)
  lw s2, -16(fp)
  lw s3, -20(fp)
  lw s4, -24(fp)
  lw a0, -28(fp) 			# Load return value to a0
  lw ra, -4(fp)                         # Restore ra register
  lw fp, -8(fp)                         # Restore old fp
  addi sp, sp, 32
  addi sp, sp, 8
  jr ra                                 # Return


# Print the error message at a0 and ends the program
.globl error
error:
  mv a1, a0                                # Move msg address to a1
  li a0, @print_string                     # Code for print_string ecall
  ecall                                    # Print error message in a1
  li a1, 10                                # Load newline character
  li a0, @print_char                       # Code for print_char ecall
  ecall                                    # Print newline
  li a0, @exit                             # Code for exit ecall
  ecall                                    # Exit with code
abort_17:                                  # Infinite loop
  j abort_17                               # Prevent fallthrough


# Allocate a0 bytes on the heap, returns pointer to start in a0
.globl alloc
alloc:
  mv a1, a0                                # Move requested size to a1
  li a0, @sbrk                             # Code for ecall: sbrk
  ecall                                    # Request a1 bytes
  jr ra                                    # Return to caller


.data

.globl msg_0
msg_0:
  .asciiz "null pointer"
  .align 2



